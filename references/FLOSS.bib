@online{gcc,
  author = {Stallman, Richard and contributors},
  year = {1987},
  title = {{GCC, the GNU Compiler Collection}},
  url = {http://gcc.gnu.org/},
  month = {May},
}

@online{gdb,
  author = {Stallman, Richard and {GNU Project}},
  year = {1986},
  title = {{GDB: The GNU Project Debugger}},
  url = {https://www.gnu.org/software/gdb/},
}

@online{verilator,
  author = {Snyder, Wilson and contributors},
  title = {{Verilator, FOSS tool which converts Verilog to a cycle-accurate behavioral model in C++ or SystemC}},
  url = {https://www.veripool.org/wiki/verilator},
  year = {2003},
}

@online{llvm,
  author = {Adve, Vikram and Lattner, Chris and {LLVM Developer Group}},
  title = {{LLVM Project, a collection of modular and reusable compiler and toolchain technologies}},
  url = {https://www.llvm.org/},
  year = {2003},
}

@online{gh:nvc,
  author = {Gasson, Nick and {contributors}},
  title = {{NVC, is a VHDL compiler and simulator aiming for IEEE 1076-2002 compliance}},
  url = {https://github.com/nickg/nvc},
  year = {2011},
}

@Inbook{nikhil08,
 author="Nikhil, Rishiyur S.",
 editor="Coussy, Philippe and Morawiec, Adam",
 title="Bluespec: A General-Purpose Approach to High-Level Synthesis Based on Parallel Atomic Transactions",
 bookTitle="High-Level Synthesis: From Algorithm to Digital Circuit",
 year="2008",
 publisher="Springer Netherlands",
 address="Dordrecht",
 pages="129--146",
 isbn="978-1-4020-8588-8",
 doi="10.1007/978-1-4020-8588-8_8",
 url="https://doi.org/10.1007/978-1-4020-8588-8_8"
}

@InProceedings{yosys,
  author = {Clifford, Wolf and Glaser, Johann},
  title = {{A Free Verilog Synthesis Suite}},
  booktitle = {Proceedings of Austrochip 2013},
}

@Online{gh:wavedrom,
  author = {Chapyzhenka, Aliaksei and {contributors}},
  title  = {{Wavedrom, digital timing diagram rendering engine}},
  url    = {https://github.com/wavedrom/wavedrom},
  year   = {2014},
}

@Online{gh:dwfv,
  author = {Surply, Pierre and Oster, Jay},
  title  = {{DWFV, a simple digital waveform viewer with vi-like key bindings}},
  url    = {https://github.com/psurply/dwfv},
  year   = {2019},
}

@Online{gh:gtkwave,
  author = {Bybell, Tony and {contributors}},
  title  = {{GTKWave: a is a fully featured GTK+ based wave viewer for Unix, Win32, and Mac OSX}},
  url    = {https://github.com/gtkwave/gtkwave},
  year   = {1998},
}

@Online{sigrok,
  author = {Hermann, Uwe and Vermeulen, Bert and {contributors}},
  title  = {{sigrok: portable, cross-platform, Free/Libre/Open-Source signal analysis software suite}},
  url    = {https://sigrok.org/},
  year   = {2011},
}

@Online{pulseview,
  author = {Holdsworth, Joel and Hermann, Uwe and Apel, Soeren and {contributors}},
  title  = {{PulseView: a Qt based logic analyzer, oscilloscope and MSO GUI for sigrok}},
  url    = {https://sigrok.org/wiki/PulseView},
  year   = {2012},
}

@Online{gh:ghdl,
  author = {Gingold, Tristan and {contributors}},
  title  = {{GHDL: open-source analyzer, compiler, simulator and (experimental) synthesizer for VHDL}},
  url    = {https://github.com/ghdl/ghdl},
  month  = {Sep},
  year   = {2003},
}

@Online{gh:ghdl-yosys-plugin,
  title  = {{ghdl-yosys-plugin: VHDL synthesis (based on ghdl and yosys)}},
  url    = {https://github.com/ghdl/ghdl-yosys-plugin},
  year   = {2017},
}

@Online{gh:ghdl-cross.mk,
  author       = {Strubel, Martin},
  title        = {{Makefiles to build a cross compiling GHDL (gcc ortho)}},
  url          = {https://github.com/hackfin/ghdl-cross.mk},
  month        = {Sep},
  year         = {2018},
}

@online{gh:rust_hdl,
  author = {Kraigher, Olof and {contributors}},
  year = {2018},
  title = {{rust\_hdl, a collection of HDL related tools}},
  url = {https://github.com/kraigher/rust_hdl},
}

@online{gh:pyVHDLParser,
  author = {Lehmann, Patrick},
  year = {2017},
  title = {{pyVHDLParser, a token-stream based parser for VHDL-2008}},
  url = {https://github.com/Paebbels/pyVHDLParser},
}

@online{gh:sphinxcontrib-vhdldomain,
  author = {Lehmann, Patrick},
  year = {2017},
  title = {{An Sphinx language domain for VHDL}},
  url = {https://github.com/Paebbels/sphinxcontrib-vhdldomain},
}

@online{sphinx,
  author = {Brandl, Georg and KOMIYA, Takeshi and {contributors}},
  year = {2007},
  title = {{Sphinx, Python Documentation Generator}},
  url = {https://www.sphinx-doc.org},
}

@online{verible,
  author = {Fang, David and Zeller, Henner and {contributors}},
  year = {2019},
  title = {{Verible, a suite of SystemVerilog developer tools, including a parser, style-linter, and formatter}},
  url = {https://google.github.io/verible},
}

@online{surelog,
  author = {Dargelas, Alain and Zeller, Henner and {contributors}},
  year = {2019},
  title = {{Surelog, SystemVerilog 2017 Pre-processor, Parser, Elaborator, UHDM Compiler}},
  url = {https://github.com/alainmarcel/Surelog/},
}

@inproceedings{dargelas20,
  title = {{Universal Hardware Data Model}},
  author = {Dargelas, Alain and Zeller, Henner},
  booktitle = {Workshop on Open-Source EDA Technology 2020 (WOSET)},
  year = {2020},
  month = {10},
  url = {https://woset-workshop.github.io/PDFs/2020/a10.pdf}
}

@online{gh:spinal,
  author = {Papon, Charles},
  year = {2015},
  title = {{SpinalHDL: A high level hardware description language}},
  url = {https://github.com/SpinalHDL},
  month = {Jan},
}

@inproceedings{schuiki20,
author = {Schuiki, Fabian and Kurth, Andreas and Grosser, Tobias and Benini, Luca},
title = {{LLHD: A Multi-Level Intermediate Representation for Hardware Description Languages}},
year = {2020},
isbn = {9781450376136},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3385412.3386024},
doi = {10.1145/3385412.3386024},
abstract = {Modern Hardware Description Languages (HDLs) such as SystemVerilog or VHDL are, due to their sheer complexity, insufficient to transport designs through modern circuit design flows. Instead, each design automation tool lowers HDLs to its own Intermediate Representation (IR). These tools are monolithic and mostly proprietary, disagree in their implementation of HDLs, and while many redundant IRs exists, no IR today can be used through the entire circuit design flow. To solve this problem, we propose the LLHD multi-level IR. LLHD is designed as simple, unambiguous reference description of a digital circuit, yet fully captures existing HDLs. We show this with our reference compiler on designs as complex as full CPU cores. LLHD comes with lowering passes to a hardware-near structural IR, which readily integrates with existing tools. LLHD establishes the basis for innovation in HDLs and tools without redundant compilers or disjoint IRs. For instance, we implement an LLHD simulator that runs up to 2.4\texttimes{} faster than commercial simulators but produces equivalent, cycle-accurate results. An initial vertically-integrated research prototype is capable of representing all levels of the IR, implements lowering from the behavioural to the structural IR, and covers a sufficient subset of SystemVerilog to support a full CPU design.},
booktitle = {Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation},
pages = {258–271},
numpages = {14},
keywords = {hardware description languages, intermediate representations, transformation passes},
location = {London, UK},
series = {PLDI 2020}
}

@online{gh:vexriscv,
  author = {Papon, Charles},
  title = {{VexRiscv: a FPGA friendly 32 bit RISC-V CPU implementation}},
  url = {https://github.com/SpinalHDL/VexRiscv},
}

@online{gh:vexriscvsocsoftware,
  author = {Papon, Charles},
  title = {{VexRiscv SoC software}},
  url = {https://github.com/SpinalHDL/VexRiscvSocSoftware},
}

@online{gh:saxonsoc,
  author = {Papon, Charles},
  title = {{SoC based on VexRiscv and ICE40 UP5K}},
  url = {https://github.com/SpinalHDL/SaxonSoc},
}

@online{symbolator,
  author = {Thibedeau, Kevin},
  title = {{Symbolator, a component diagramming tool for VHDL and Verilog}},
  url = {https://kevinpt.github.io/symbolator},
}

@TechReport{scala,
  author = {Martin Odersky},
  title = {An {O}verview of the {S}cala {P}rogramming {L}anguage},
  institution = {EPFL},
  address = {Lausanne, Switzerland},
  year = 2004,
  number = {IC/2004/64}
}

@online{gh:b-lang,
  author = {Brian Foley},
  year = {2020},
  title = {{Bluespec Compiler (BSC)}},
  url = {https://github.com/B-Lang-org/bsc},
  month = {Feb},
}

@online{chisel,
  title = {{Chisel/FIRRTL: Hardware Compiler Framework}},
  url = {https://www.chisel-lang.org/},
}

@online{myhdl,
  title = {{MyHDL: From Python to Silicon!}},
  url = {http://www.myhdl.org/},
}

@online{migen,
  title = {Migen: a Python-based tool that automates further the VLSI design process},
  url = {https://m-labs.hk/gateware/migen/},
}

@online{clash,
  author = {QBayLogic},
  title = {Clash: a modern, functional, hardware description language},
  url = {https://clash-lang.org},
}

@online{gh:silice,
  author = {Sylvain Lefebvre},
  title = {{Silice, a language for hardcoding Algorithms into FPGA hardware}},
  url = {https://github.com/sylefeb/Silice},
}

@Online{gh:gdsfactory,
  author = {Matres, Joaquin and {contributors}},
  title  = {{gdsfactory: an open source platform for end to-end photonic chip design and validation}},
  url    = {https://github.com/gdsfactory},
  year   = {2017},
}

@Online{openroad-web,
  title = {{OpenROAD}},
  url = {https://theopenroadproject.org/},
}

@InProceedings{openroad,
  author = {Tutu Ajayi and D. Blaauw and T.-B. Chan and CK Cheng and Vidya A. Chhabria and Daniel K. Choo and Matteo Coltella and Ronald Dreslinski and Mateus Fogaça and Seyedpedram Hashemi and Abeba Ibrahim and Andrew B. Kahng and Meesun Kim and Jie Li and Zhengli Liang and Uday Mallappa and Peter Penzes and Geraldo Pradipta and S. Reda and Austin Rovinski and Kambiz Samadi and Sachin S. Sapatnekar and L. Saul and Carl Sechen and Vegi Srinivas and Wendy Swartz and Delyse Sylvester and Danny Urquhart and Ling-song Wang and Maverick Woo and B. Xu},
  booktitle = {Proc. Government Microcircuit Applications and Critical Technology Conference (GOMACTech)},
  title = {{OpenROAD: Toward a Self-Driving, Open-Source Digital Layout Implementation Tool Chain}},
  year = {2019},
}

@Online{gh:cascade,
  author = {VMware Research},
  title = {{Cascade: A Just-In-Time Compiler for Verilog}},
  url = {https://github.com/vmware/cascade},
  month = {Sep},
  year = {2018},
}

@inproceedings{cascade,
  author = {Schkufza, Eric and Wei, Michael and Rossbach, Christopher J.},
  title = {Just-In-Time Compilation for Verilog: A New Technique for Improving the FPGA Programming Experience},
  booktitle = {Proceedings of the Twenty-Fourth International Conference on Architectural Support for Programming Languages and Operating Systems},
  year = {2019},
  isbn = {9781450362405},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  url = {https://doi.org/10.1145/3297858.3304010},
  doi = {10.1145/3297858.3304010},
  pages = {271–286},
  numpages = {16},
  keywords = {cascade, jit, fpga, verilog, just-in-time, compiler},
  location = {Providence, RI, USA},
  series = {ASPLOS ’19}
}

@Online{pulp,
  title = {{PULP Platform}},
  url = {https://www.pulp-platform.org/},
}

@Online{opentitan,
  title = {{opentitan}},
  url = {https://opentitan.org/},
}

@Online{lowrisc,
  title = {{lowrisc}},
  url = {https://www.lowrisc.org/},
}

@book{parr13,
  abstract = {Programmers run into parsing problems all the time. Whether it's a data format like JSON, a network protocol like SMTP, a server configuration file for Apache, a PostScript/PDF file, or a simple spreadsheet macro language---ANTLR v4 and this book will demystify the process. ANTLR v4 has been rewritten from scratch to make it easier than ever to build parsers and the language applications built on top. This completely rewritten new edition of the bestselling Definitive ANTLR Reference shows you how to take advantage of these new features.},
  added-at = {2017-07-11T18:56:37.000+0200},
  address = {Raleigh, NC},
  author = {Parr, Terence},
  biburl = {https://www.bibsonomy.org/bibtex/20354054f6d250f56a79fd708c54cf5b6/flint63},
  description = {1. Auflage 2007},
  edition = 2,
  file = {eBook:2013/Parr13.pdf:PDF;Pragmatic Bookshelf Product page:https\://pragprog.com/book/tpantlr2/the-definitive-antlr-4-reference:URL;Amazon Search inside:http\://www.amazon.de/gp/reader/1934356999/:URL;Related Web Site:http\://www.antlr.org/:URL},
  groups = {public},
  interhash = {d00798f134910fec8b9d1df7a0729849},
  intrahash = {0354054f6d250f56a79fd708c54cf5b6},
  isbn = {978-1-93435-699-9},
  keywords = {01841 101 book shelf software development java compiler tool},
  publisher = {Pragmatic Bookshelf},
  timestamp = {2018-04-16T11:40:11.000+0200},
  title = {The Definitive ANTLR 4 Reference},
  url = {https://www.safaribooksonline.com/library/view/the-definitive-antlr/9781941222621/},
  username = {flint63},
  year = 2013
}

@online{GNUBison,
  title={{GNU Bison, a general-purpose parser generator that converts an annotated context-free grammar into a deterministic LR or generalized LR (GLR) parser employing LALR(1) parser tables}},
  url={https://www.gnu.org/software/bison/}
}

@online{iverilog,
  author={Williams, Stephen and {contributors}},
  title={{Icarus Verilog, a Verilog simulation and synthesis tool}},
  url={http://iverilog.icarus.com/}
}

@article{vega21,
  title = {Reticle: A Virtual Machine for Programming Modern FPGAs},
  author = {Vega, Luis and McMahan, Joseph and Sampson, Adrian and Grossman, Dan and Ceze, Luis},
  year = 2021,
  url = {https://www.cs.cornell.edu/~asampson/media/papers/reticle-pldi2021-preprint.pdf}
}

@InProceedings{rovinski20,
  author={Rovinski, Austin and Ajayi, Tutu and Kim, Minsoo and Wang, Guanru and Saligane, Mehdi},
  booktitle={2020 IEEE/ACM International Conference On Computer Aided Design (ICCAD)},
  title={Bridging Academic Open-Source EDA to Real-World Usability},
  year={2020},
  volume={},
  number={},
  pages={1-7},
  doi={}
}

@article{murray20micro,
  author={Murray, Kevin E. and Elgammal, Mohamed A. and Betz, Vaughn and Ansell, Tim and Rothman, Keith and Comodi, Alessandro},
  journal={IEEE Micro},
  title={SymbiFlow and VPR: An Open-Source Design Flow for Commercial and Novel FPGAs},
  year={2020},
  volume={40},
  number={4},
  pages={49-57},
  doi={10.1109/MM.2020.2998435}
}

@article{murray20acm,
  author = {Murray, Kevin E. and Petelin, Oleg and Zhong, Sheng and Wang, Jia Min and Eldafrawy, Mohamed and Legault, Jean-Philippe and Sha, Eugene and Graham, Aaron G. and Wu, Jean and Walker, Matthew J. P. and Zeng, Hanqing and Patros, Panagiotis and Luu, Jason and Kent, Kenneth B. and Betz, Vaughn},
  title = {VTR 8: High-Performance CAD and Customizable FPGA Architecture Modelling},
  year = {2020},
  issue_date = {June 2020},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {13},
  number = {2},
  issn = {1936-7406},
  url = {https://doi.org/10.1145/3388617},
  doi = {10.1145/3388617},
  abstract = {Developing Field-programmable Gate Array (FPGA) architectures is challenging due to
the competing requirements of various application domains and changing manufacturing
process technology. This is compounded by the difficulty of fairly evaluating FPGA
architectural choices, which requires sophisticated high-quality Computer Aided Design
(CAD) tools to target each potential architecture. This article describes version
8.0 of the open source Verilog to Routing (VTR) project, which provides such a design
flow. VTR 8 expands the scope of FPGA architectures that can be modelled, allowing
VTR to target and model many details of both commercial and proposed FPGA architectures.
The VTR design flow also serves as a baseline for evaluating new CAD algorithms. It
is therefore important, for both CAD algorithm comparisons and the validity of architectural
conclusions, that VTR produce high-quality circuit implementations. VTR 8 significantly
improves optimization quality (reductions of 15% minimum routable channel width, 41%
wirelength, and 12% critical path delay), run-time (5.3\texttimes{} faster) and memory footprint
(3.3\texttimes{} lower). Finally, we demonstrate VTR is run-time and memory footprint efficient,
while producing circuit implementations of reasonable quality compared to highly-tuned
architecture-specific industrial tools—showing that architecture generality, good
implementation quality, and run-time efficiency are not mutually exclusive goals.},
  journal = {ACM Trans. Reconfigurable Technol. Syst.},
  month = may,
  articleno = {9},
  numpages = {55},
  keywords = {electronic design automation (EDA), Computer aided design (CAD), versatile place and route (VPR), verilog to routing (VTR), routing, placement, packing, field programmable gate array (FPGA)}
}

@InProceedings{ansell20,
  author={Ansell, Tim and Saligane, Mehdi},
  booktitle={2020 IEEE/ACM International Conference On Computer Aided Design (ICCAD)},
  title={The Missing Pieces of Open Design Enablement: A Recent History of Google Efforts : lnvited Paper},
  year={2020},
  volume={},
  number={},
  pages={1-8},
  doi={}
}

@InProceedings{kahng20,
  author={Kahng, Andrew B.},
  booktitle={2020 IFIP/IEEE 28th International Conference on Very Large Scale Integration (VLSI-SOC)},
  title={Open-Source EDA: If We Build It, Who Will Come?},
  year={2020},
  volume={},
  number={},
  pages={1-6},
  doi={10.1109/VLSI-SOC46417.2020.9344073}
}

@InProceedings{chen19,
  author={Chen, Jianli and Jiang, Iris Hui-Ru and Jung, Jinwook and Kahng, Andrew B. and Kravets, Victor N. and Li, Yih-Lang and Lin, Shih-Ting and Woo, Mingyu},
  booktitle={2019 IEEE/ACM International Conference on Computer-Aided Design (ICCAD)},
  title={DATC RDF-2019: Towards a Complete Academic Reference Design Flow},
  year={2019},
  volume={},
  number={},
  pages={1-6},
  doi={10.1109/ICCAD45719.2019.8942120}
}

