name: Gource

on:
  push:
  schedule:
    - cron: '0 0 1 * *'
  workflow_dispatch:

jobs:


  Params:
    runs-on: ubuntu-latest
    outputs:
      cfg: ${{ steps.params.outputs.cfg }}
      jobs: ${{ steps.params.outputs.jobs }}
      mailmap: ${{ steps.params.outputs.mailmap }}
    steps:

    - name: 'ðŸ§° Checkout'
      uses: actions/checkout@v2

    - name: Convert YAML config to JSON string
      id: params
      shell: python
      run: |
        from pathlib import Path
        from subprocess import check_call
        import yaml

        ROOT = Path('gource').resolve()
        LogDir = ROOT / 'logs'
        LogDir.mkdir(exist_ok=True)

        enabled = [
            'EDAA',
            'EDAA-all',
            'pyTooling',
            'ghdl',
            'osvvm',
            'osvb',
            'osvb-noroot',
            'HDL',
            'DBHI',
            'VUnit',
            'HDLC',
            'NEORV32',
            'CoCoTb',
            'openFPGALoader',
            'spf13',
            #'MSYS2',
            #'MSYS2-all',
            'SymbiFlow',
            'CHIPSAlliance',
            'VTR',
            'YosysHQ',
            'LibreCores',
            'FPGAwars'
        ]

        with (ROOT / 'config.yml').open('r') as fptr:
            cfg = yaml.load(fptr, Loader=yaml.FullLoader)
            for key in cfg:
                cfg[key]['name'] = key
            print(f"::set-output name=cfg::{cfg!s}")
            jobs = [
                {'name': key, 'title': job['title']}
                for key, job in cfg.items()
                if key in enabled
            ]
            print(f"::set-output name=jobs::{jobs!s}")

        with (ROOT / '.mailmap').open('r') as fptr:
            print(f"::set-output name=mailmap::{','.join(fptr.read().splitlines())!s}")


  GetLogs:
    needs: Params
    runs-on: ubuntu-latest
    steps:

    - name: Get logs
      uses: umarcor/umarcor/gource/logs@gource
      with:
        cfg: ${{ needs.Params.outputs.cfg }}
        mailmap: ${{ needs.Params.outputs.mailmap }}
        artifact: glogs


  GenerateVideo:
    needs:
      - Params
      - GetLogs
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.Params.outputs.jobs) }}
    name: ${{ matrix.name }} | ${{ matrix.title }}
    steps:

    - name: Get job from config
      shell: python
      id: job
      run: |
        job = ${{ needs.Params.outputs.cfg }}['${{ matrix.name }}']
        print(f"::set-output name=job::{job!s}")

    - name: Combine logs and generate video
      uses: umarcor/umarcor/gource/video@gource
      with:
        artifact: glogs
        job: ${{ steps.job.outputs.job }}


  Release:
    needs: GenerateVideo
    runs-on: ubuntu-latest
    steps:
    - uses: actions/download-artifact@v2
      with:
        path: artifact
    - run: |
        cd artifact
        tar czvf glogs.tar.gz glogs
        rm -rf glogs
    - uses: eine/tip@master
      with:
        token: ${{ github.token }}
        files: artifact/**/*
        tag: gource-videos
